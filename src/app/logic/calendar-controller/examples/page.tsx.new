'use client'

import React, { useEffect } from 'react'
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { SEO } from '@/components/seo'
import { SocialShareContainer } from "@/components/social-share-container"
import { DocsPageLayout } from "@/components/docs/docs-page-layout"
import { event as trackEvent } from "@/lib/analytics"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent } from "@/components/ui/card"
import { SyntaxHighlighter } from "@/components/syntax-highlighter"

export default function CalendarControllerExamplesPage() {
  // Track page view for analytics
  useEffect(() => {
    trackEvent({
      action: 'page_view',
      category: 'Documentation',
      label: 'Calendar Controller Examples'
    });
  }, []);

  return (
    <>
      <SEO
        title="Calendar Controller Examples | Uplink Protocol"
        description="Interactive examples showcasing the Calendar Controller component in action with various configurations and use cases."
      />
      
      <DocsPageLayout>
        {/* Header & Navigation */}
        <div className="space-y-2 mb-6 sm:mb-8">
          <Badge variant="outline">Logic</Badge>
          <h1 className="text-3xl sm:text-4xl font-bold tracking-tight">Calendar Controller Examples</h1>          
          <p className="text-muted-foreground text-base sm:text-lg">
            Interactive examples showcasing the Calendar Controller component with various configurations and use cases.
          </p>
          
          <div className="flex flex-wrap gap-3 sm:gap-4 pt-4 border-b border-border">
            <Link href="/logic/calendar-controller/overview" className="text-muted-foreground hover:text-foreground pb-2 text-sm sm:text-base">Overview</Link>
            <Link href="/logic/calendar-controller/api" className="text-muted-foreground hover:text-foreground pb-2 text-sm sm:text-base">API</Link>
            <Link href="/logic/calendar-controller/examples" className="font-medium text-primary border-b-2 border-primary pb-2 text-sm sm:text-base">Examples</Link>
          </div>
        </div>
        
        <section className="space-y-12">
          <div id="examples">
            <h2 className="text-3xl font-bold tracking-tight mb-6">Implementation Examples</h2>
            <p className="text-muted-foreground text-lg mb-8">
              These examples demonstrate how to implement Calendar Controller with different configurations and frameworks.
            </p>

            <Tabs defaultValue="basic" className="w-full">
              <TabsList className="mb-6 sm:mb-4 w-full grid grid-cols-2 sm:flex sm:flex-wrap sm:justify-start gap-2 sm:gap-3">
                <TabsTrigger value="basic">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="hidden sm:inline-block mr-1">
                    <rect width="18" height="18" x="3" y="3" rx="2" />
                    <path d="M3 9h18" />
                    <path d="M9 21V9" />
                  </svg>
                  <span>Basic Usage</span>
                </TabsTrigger>
                
                <TabsTrigger value="range">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="hidden sm:inline-block mr-1">
                    <rect width="18" height="18" x="3" y="3" rx="2" />
                    <path d="M8 3v4" />
                    <path d="M16 3v4" />
                    <path d="M3 11h18" />
                  </svg>
                  <span>Date Range</span>
                </TabsTrigger>
                
                <TabsTrigger value="i18n">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="hidden sm:inline-block mr-1">
                    <circle cx="12" cy="12" r="10" />
                    <path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20" />
                    <path d="M2 12h20" />
                  </svg>
                  <span>Internationalization</span>
                </TabsTrigger>
              </TabsList>

              {/* Basic Usage Example Tab */}
              <TabsContent value="basic" data-example-tab="true" className="space-y-4" id="basic">
                <Card>
                  <CardContent className="p-6">
                    <h3 className="text-xl font-medium mb-4">Basic Calendar Implementation</h3>
                    <p className="text-muted-foreground mb-6">
                      A simple calendar implementation with day, month, and year views using the Calendar Controller. 
                      This example shows how to create a basic calendar with the default configuration.
                    </p>
                    
                    <div className="bg-muted p-4 rounded-md mb-6">
                      <div className="text-center p-4">
                        [Interactive Calendar Component Preview]
                      </div>
                    </div>

                    <div className="mt-6">
                      <h4 className="text-lg font-medium mb-2">React Implementation</h4>
                      <Card>
                        <CardContent className="p-0 rounded-xl overflow-hidden">
                          <SyntaxHighlighter
                            code={`import { useState, useEffect } from 'react';
import { useUplinkController } from '@uplink/react';
import { CalendarController } from '@uplink/calendar-controller';

function BasicCalendarExample() {
  const { state, methods } = useUplinkController(new CalendarController());
  
  return (
    <div className="calendar-container">
      {/* Header with navigation and current month/year */}
      <div className="calendar-header">
        <button onClick={methods.previousMonth}>&lt;</button>
        <h2>{state.currentMonthName} {state.currentYear}</h2>
        <button onClick={methods.nextMonth}>&gt;</button>
      </div>
      
      {/* Weekday headers */}
      <div className="weekdays-header">
        {state.weekdayNames.map((day, index) => (
          <div key={index} className="weekday-name">{day}</div>
        ))}
      </div>
      
      {/* Calendar grid */}
      <div className="calendar-grid">
        {state.daysInMonth.map((day, index) => (
          <div 
            key={index}
            className={\`calendar-day \${day.isCurrentMonth ? '' : 'other-month'} 
                       \${day.isToday ? 'today' : ''} 
                       \${day.isSelected ? 'selected' : ''}\`}
            onClick={() => methods.selectDate(day.date)}
          >
            {day.dayNumber}
          </div>
        ))}
      </div>
      
      {/* Current selection display */}
      <div className="selection-display">
        Selected: {state.selectedDate ? state.selectedDate.toLocaleDateString() : 'None'}
      </div>
    </div>
  );
}`}
                            language="jsx"
                          />
                        </CardContent>
                      </Card>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Date Range Tab */}
              <TabsContent value="range" data-example-tab="true" className="space-y-4" id="range">
                <Card>
                  <CardContent className="p-6">
                    <h3 className="text-xl font-medium mb-4">Date Range Selection</h3>
                    <p className="text-muted-foreground mb-6">
                      This example demonstrates how to implement a date range picker using Calendar Controller.
                      Users can select a start and end date to define a range.
                    </p>
                    
                    <div className="bg-muted p-4 rounded-md mb-6">
                      <div className="text-center p-4">
                        [Date Range Picker Component Preview]
                      </div>
                    </div>

                    <div className="mt-6">
                      <h4 className="text-lg font-medium mb-2">Vue Implementation</h4>
                      <Card>
                        <CardContent className="p-0 rounded-xl overflow-hidden">
                          <SyntaxHighlighter
                            code={`<template>
  <div class="range-calendar">
    <div class="calendar-header">
      <button @click="methods.previousMonth">&lt;</button>
      <h3>{{ state.currentMonthName }} {{ state.currentYear }}</h3>
      <button @click="methods.nextMonth">&gt;</button>
    </div>
    
    <div class="weekdays-header">
      <span v-for="(day, index) in state.weekdayNames" :key="index">
        {{ day }}
      </span>
    </div>
    
    <div class="calendar-grid">
      <div 
        v-for="(day, index) in state.daysInMonth" 
        :key="index"
        class="calendar-day" 
        :class="{
          'other-month': !day.isCurrentMonth,
          'range-start': isRangeStart(day.date),
          'range-end': isRangeEnd(day.date),
          'in-range': isInRange(day.date),
          'today': day.isToday
        }"
        @click="selectRangeDate(day.date)"
      >
        {{ day.dayNumber }}
      </div>
    </div>
    
    <div class="range-display">
      <div>Start: {{ rangeStart ? formatDate(rangeStart) : 'Not selected' }}</div>
      <div>End: {{ rangeEnd ? formatDate(rangeEnd) : 'Not selected' }}</div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { useUplinkController } from '@uplink/vue';
import { CalendarController } from '@uplink/calendar-controller';

const { state, methods } = useUplinkController(new CalendarController());

const rangeStart = ref(null);
const rangeEnd = ref(null);
const isSelectingEnd = ref(false);

// Format date for display
const formatDate = (date) => {
  return date ? new Date(date).toLocaleDateString() : '';
};

// Check if date is range start
const isRangeStart = (date) => {
  return rangeStart.value && isSameDay(new Date(date), new Date(rangeStart.value));
};

// Check if date is range end
const isRangeEnd = (date) => {
  return rangeEnd.value && isSameDay(new Date(date), new Date(rangeEnd.value));
};

// Check if date is within range
const isInRange = (date) => {
  if (!rangeStart.value || !rangeEnd.value) return false;
  const current = new Date(date);
  return current > new Date(rangeStart.value) && current < new Date(rangeEnd.value);
};

// Compare if two dates are the same day
const isSameDay = (d1, d2) => {
  return d1.getFullYear() === d2.getFullYear() &&
         d1.getMonth() === d2.getMonth() &&
         d1.getDate() === d2.getDate();
};

// Handle date selection for range
const selectRangeDate = (date) => {
  if (!isSelectingEnd.value) {
    // First click - set start date
    rangeStart.value = new Date(date);
    rangeEnd.value = null;
    isSelectingEnd.value = true;
  } else {
    // Second click - set end date if after start date
    const selectedDate = new Date(date);
    if (selectedDate >= new Date(rangeStart.value)) {
      rangeEnd.value = selectedDate;
    } else {
      // If selected date is before start, swap them
      rangeEnd.value = new Date(rangeStart.value);
      rangeStart.value = selectedDate;
    }
    isSelectingEnd.value = false;
  }
};
</script>`}
                            language="vue"
                          />
                        </CardContent>
                      </Card>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Internationalization Tab */}
              <TabsContent value="i18n" data-example-tab="true" className="space-y-4" id="i18n">
                <Card>
                  <CardContent className="p-6">
                    <h3 className="text-xl font-medium mb-4">Internationalized Calendar</h3>
                    <p className="text-muted-foreground mb-6">
                      This example shows how to implement a calendar with internationalization support.
                      The calendar will display month names, weekday names, and format dates according to the selected locale.
                    </p>
                    
                    <div className="bg-muted p-4 rounded-md mb-6">
                      <div className="text-center p-4">
                        [Internationalized Calendar Preview]
                      </div>
                    </div>

                    <div className="mt-6">
                      <h4 className="text-lg font-medium mb-2">Implementation</h4>
                      <Card>
                        <CardContent className="p-0 rounded-xl overflow-hidden">
                          <SyntaxHighlighter
                            code={`import { useState } from 'react';
import { useUplinkController } from '@uplink/react';
import { CalendarController } from '@uplink/calendar-controller';

function InternationalCalendar() {
  // Available locales
  const locales = [
    { code: 'en-US', name: 'English (US)' },
    { code: 'fr-FR', name: 'French' },
    { code: 'es-ES', name: 'Spanish' },
    { code: 'de-DE', name: 'German' },
    { code: 'ja-JP', name: 'Japanese' },
    { code: 'ar-EG', name: 'Arabic (Egypt)' }
  ];
  
  const [locale, setLocale] = useState('en-US');
  
  // Create controller with the selected locale and Monday as first day of week
  const { state, methods } = useUplinkController(new CalendarController({
    locale: locale,
    firstDayOfWeek: 1 // 1 = Monday
  }));
  
  // Handle locale change
  const changeLocale = (e) => {
    const newLocale = e.target.value;
    setLocale(newLocale);
    methods.setLocale(newLocale);
  };
  
  return (
    <div className="i18n-calendar">
      <div className="locale-selector mb-4">
        <label htmlFor="locale-select">Select Locale: </label>
        <select 
          id="locale-select" 
          value={locale} 
          onChange={changeLocale}
          className="p-2 border rounded"
        >
          {locales.map(loc => (
            <option key={loc.code} value={loc.code}>{loc.name}</option>
          ))}
        </select>
      </div>
      
      <div className="calendar-header">
        <button onClick={methods.previousMonth}>&lt;</button>
        <h3>{state.currentMonthName} {state.currentYear}</h3>
        <button onClick={methods.nextMonth}>&gt;</button>
      </div>
      
      <div className="weekdays-row">
        {state.weekdayNames.map((day, index) => (
          <div key={index} className="weekday">
            {day}
          </div>
        ))}
      </div>
      
      <div className="days-grid">
        {state.daysInMonth.map((day, index) => (
          <div
            key={index}
            className={\`day \${day.isCurrentMonth ? '' : 'other-month'} 
                     \${day.isToday ? 'today' : ''} 
                     \${day.isSelected ? 'selected' : ''}\`}
            onClick={() => methods.selectDate(day.date)}
          >
            {day.dayNumber}
          </div>
        ))}
      </div>
      
      <div className="mt-4">
        <p>
          Selected date: {state.selectedDate ? new Date(state.selectedDate).toLocaleDateString(locale) : 'None'}
        </p>
        <p>
          Current locale: {locale}
        </p>
      </div>
    </div>
  );
}`}
                            language="jsx"
                          />
                        </CardContent>
                      </Card>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Additional Resources Section */}
          <div className="mt-12">
            <h2 className="text-2xl font-semibold mb-6">Additional Resources</h2>
            <div className="grid md:grid-cols-2 gap-6">
              <Link href="/logic/calendar-controller/api">
                <Card className="h-full hover:shadow-md transition-all cursor-pointer">
                  <CardContent className="p-6 h-full">
                    <h3 className="text-xl font-semibold mb-2">API Reference</h3>
                    <p className="text-muted-foreground">Explore the complete API documentation for Calendar Controller.</p>
                  </CardContent>
                </Card>
              </Link>
              <Link href="/logic/calendar-controller/overview">
                <Card className="h-full hover:shadow-md transition-all cursor-pointer">
                  <CardContent className="p-6 h-full">
                    <h3 className="text-xl font-semibold mb-2">Overview</h3>
                    <p className="text-muted-foreground">Learn about the key features and capabilities of Calendar Controller.</p>
                  </CardContent>
                </Card>
              </Link>
            </div>
          </div>
          
          {/* Social Share */}
          <SocialShareContainer 
            title="Calendar Controller Examples - Uplink Protocol"
            description="Interactive examples showcasing the Calendar Controller component in action with various configurations and use cases."
          />
        </section>
      </DocsPageLayout>
    </>
  )
}
